// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: eds.proto

/*
Package golego_engine_eds_proto is a generated protocol buffer package.

It is generated from these files:
	eds.proto

It has these top-level messages:
	Event
	EventRequest
	EventResponse
	RollbackRequest
	RollbackResponse
*/
package golego_engine_eds_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Handler service

type HandlerService interface {
	// handle event
	OnEvent(ctx context.Context, in *EventRequest, opts ...client.CallOption) (*EventResponse, error)
	OnRollback(ctx context.Context, in *RollbackRequest, opts ...client.CallOption) (*RollbackResponse, error)
}

type handlerService struct {
	c    client.Client
	name string
}

func NewHandlerService(name string, c client.Client) HandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "golego.engine.eds.proto"
	}
	return &handlerService{
		c:    c,
		name: name,
	}
}

func (c *handlerService) OnEvent(ctx context.Context, in *EventRequest, opts ...client.CallOption) (*EventResponse, error) {
	req := c.c.NewRequest(c.name, "Handler.OnEvent", in)
	out := new(EventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerService) OnRollback(ctx context.Context, in *RollbackRequest, opts ...client.CallOption) (*RollbackResponse, error) {
	req := c.c.NewRequest(c.name, "Handler.OnRollback", in)
	out := new(RollbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Handler service

type HandlerHandler interface {
	// handle event
	OnEvent(context.Context, *EventRequest, *EventResponse) error
	OnRollback(context.Context, *RollbackRequest, *RollbackResponse) error
}

func RegisterHandlerHandler(s server.Server, hdlr HandlerHandler, opts ...server.HandlerOption) {
	type handler interface {
		OnEvent(ctx context.Context, in *EventRequest, out *EventResponse) error
		OnRollback(ctx context.Context, in *RollbackRequest, out *RollbackResponse) error
	}
	type Handler struct {
		handler
	}
	h := &handlerHandler{hdlr}
	s.Handle(s.NewHandler(&Handler{h}, opts...))
}

type handlerHandler struct {
	HandlerHandler
}

func (h *handlerHandler) OnEvent(ctx context.Context, in *EventRequest, out *EventResponse) error {
	return h.HandlerHandler.OnEvent(ctx, in, out)
}

func (h *handlerHandler) OnRollback(ctx context.Context, in *RollbackRequest, out *RollbackResponse) error {
	return h.HandlerHandler.OnRollback(ctx, in, out)
}
